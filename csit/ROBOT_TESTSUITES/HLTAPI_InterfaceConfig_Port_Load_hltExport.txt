############# Spirent HLTAPI Export Log File #############
#puts "source hltapi_5.10_stc_2.10.tcl"
#source  hltapi_5.10_stc_2.10.tcl
puts "package require SpirentHltApi"
package require SpirentHltApi
set logged_ret "{offline 0} {port_handle {{10 {{91 {{113 {{124 {{10/1 port1} {10/2 port2}}}}}}}}}}} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::interface_config -mode config -port_handle port1 -create_host false -intf_mode ethernet -phy_mode copper -scheduling_mode RATE_BASED -port_loadunit MEGABITS_PER_SECOND -port_load 5 -enable_ping_response 0 -control_plane_mtu 1500 -speed ether1000 -duplex full -autonegotiation 1"
set ret [sth::interface_config -mode config -port_handle port1 -create_host false -intf_mode ethernet -phy_mode copper -scheduling_mode RATE_BASED -port_loadunit MEGABITS_PER_SECOND -port_load 5 -enable_ping_response 0 -control_plane_mtu 1500 -speed ether1000 -duplex full -autonegotiation 1]
set logged_ret "{arpnd_status 1} {arpnd_cache none} {arpnd_report none} {status 1} {handles 0}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::interface_config -mode config -port_handle port2 -create_host false -intf_mode ethernet -phy_mode copper -scheduling_mode RATE_BASED -port_loadunit MEGABITS_PER_SECOND -port_load 5 -enable_ping_response 0 -control_plane_mtu 1500 -speed ether1000 -duplex full -autonegotiation 1"
set ret [sth::interface_config -mode config -port_handle port2 -create_host false -intf_mode ethernet -phy_mode copper -scheduling_mode RATE_BASED -port_loadunit MEGABITS_PER_SECOND -port_load 5 -enable_ping_response 0 -control_plane_mtu 1500 -speed ether1000 -duplex full -autonegotiation 1]
set logged_ret "{arpnd_status 1} {arpnd_cache none} {arpnd_report none} {status 1} {handles 0}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::emulation_device_config -mode create -ip_version ipv4 -encapsulation ethernet_ii_vlan -port_handle port1 -vlan_id 750 -enable_ping_response 1 -intf_ip_addr 192.170.1.3 -gateway_ip_addr 192.170.1.1 -resolve_gateway_mac true"
set ret [sth::emulation_device_config -mode create -ip_version ipv4 -encapsulation ethernet_ii_vlan -port_handle port1 -vlan_id 750 -enable_ping_response 1 -intf_ip_addr 192.170.1.3 -gateway_ip_addr 192.170.1.1 -resolve_gateway_mac true]
set logged_ret "{handle host1} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::emulation_device_config -mode create -ip_version ipv4 -encapsulation ethernet_ii_vlan -port_handle port2 -vlan_id 600 -enable_ping_response 1 -intf_ip_addr 192.169.101.3 -gateway_ip_addr 192.169.101.1 -resolve_gateway_mac true"
set ret [sth::emulation_device_config -mode create -ip_version ipv4 -encapsulation ethernet_ii_vlan -port_handle port2 -vlan_id 600 -enable_ping_response 1 -intf_ip_addr 192.169.101.3 -gateway_ip_addr 192.169.101.1 -resolve_gateway_mac true]
set logged_ret "{handle host2} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 2000 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 48 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 2 -mac_discovery_gw 192.170.1.1"
set ret [sth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 2000 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 48 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 2 -mac_discovery_gw 192.170.1.1]
set logged_ret "{stream_id streamblock1} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 2001 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 48 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 2 -mac_discovery_gw 192.170.1.1"
set ret [sth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 2001 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 48 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 2 -mac_discovery_gw 192.170.1.1]
set logged_ret "{stream_id streamblock2} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol udp -udp_src_port 2002 -udp_dst_port 1025 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_protocol 17 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 48 -udp_src_port_count 1 -udp_src_port_mode increment -udp_src_port_repeat_count 0 -udp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 2 -mac_discovery_gw 192.170.1.1"
set ret [sth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol udp -udp_src_port 2002 -udp_dst_port 1025 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_protocol 17 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 48 -udp_src_port_count 1 -udp_src_port_mode increment -udp_src_port_repeat_count 0 -udp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 2 -mac_discovery_gw 192.170.1.1]
set logged_ret "{stream_id streamblock3} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 3001 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 46 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 1 -mac_discovery_gw 192.170.1.1"
set ret [sth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 3001 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 46 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 1 -mac_discovery_gw 192.170.1.1]
set logged_ret "{stream_id streamblock4} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 3002 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 26 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 1 -mac_discovery_gw 192.170.1.1"
set ret [sth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 3002 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 26 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 1 -mac_discovery_gw 192.170.1.1]
set logged_ret "{stream_id streamblock5} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 3003 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 18 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 1 -mac_discovery_gw 192.170.1.1"
set ret [sth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 3003 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 18 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 1 -mac_discovery_gw 192.170.1.1]
set logged_ret "{stream_id streamblock6} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 3004 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 10 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 1 -mac_discovery_gw 192.170.1.1"
set ret [sth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 3004 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 10 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 1 -mac_discovery_gw 192.170.1.1]
set logged_ret "{stream_id streamblock7} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 5000 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 48 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 1 -mac_discovery_gw 192.170.1.1"
set ret [sth::traffic_config -mode create -port_handle port1 -emulation_src_handle host1 -emulation_dst_handle host2 -l3_protocol ipv4 -l4_protocol tcp -tcp_src_port 5000 -tcp_dst_port 1024 -ip_id 0 -ip_ttl 255 -ip_hdr_length 5 -ip_fragment_offset 0 -ip_mbz 0 -ip_precedence 6 -ip_dscp 48 -tcp_src_port_count 1 -tcp_src_port_mode increment -tcp_src_port_repeat_count 0 -tcp_src_port_step 1 -enable_control_plane 0 -l3_length 160 -fill_type constant -fcs_error 0 -fill_value 0 -frame_size 160 -traffic_state 1 -high_speed_result_analysis 1 -length_mode fixed -dest_port_list port2 -tx_port_sending_traffic_to_self_en false -disable_signature 0 -enable_stream_only_gen 1 -pkts_per_burst 1 -inter_stream_gap_unit bytes -burst_loop_count 30 -transmit_mode continuous -inter_stream_gap 12 -rate_mbps 1 -mac_discovery_gw 192.170.1.1]
set logged_ret "{stream_id streamblock8} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock1 -action run"
set ret [sth::traffic_control -stream_handle streamblock1 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock2 -action run"
set ret [sth::traffic_control -stream_handle streamblock2 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock3 -action run"
set ret [sth::traffic_control -stream_handle streamblock3 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock3 -action stop"
set ret [sth::traffic_control -stream_handle streamblock3 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock2 -action stop"
set ret [sth::traffic_control -stream_handle streamblock2 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock1 -action stop"
set ret [sth::traffic_control -stream_handle streamblock1 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock1 -action run"
set ret [sth::traffic_control -stream_handle streamblock1 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock2 -action run"
set ret [sth::traffic_control -stream_handle streamblock2 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock3 -action run"
set ret [sth::traffic_control -stream_handle streamblock3 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock3 -action stop"
set ret [sth::traffic_control -stream_handle streamblock3 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock2 -action stop"
set ret [sth::traffic_control -stream_handle streamblock2 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock1 -action stop"
set ret [sth::traffic_control -stream_handle streamblock1 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock1 -action run"
set ret [sth::traffic_control -stream_handle streamblock1 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock1 -action stop"
set ret [sth::traffic_control -stream_handle streamblock1 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock4 -action run"
set ret [sth::traffic_control -stream_handle streamblock4 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock5 -action run"
set ret [sth::traffic_control -stream_handle streamblock5 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock6 -action run"
set ret [sth::traffic_control -stream_handle streamblock6 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock7 -action run"
set ret [sth::traffic_control -stream_handle streamblock7 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock8 -action run"
set ret [sth::traffic_control -stream_handle streamblock8 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock4 -action stop"
set ret [sth::traffic_control -stream_handle streamblock4 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock5 -action stop"
set ret [sth::traffic_control -stream_handle streamblock5 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock6 -action stop"
set ret [sth::traffic_control -stream_handle streamblock6 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock7 -action stop"
set ret [sth::traffic_control -stream_handle streamblock7 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock8 -action stop"
set ret [sth::traffic_control -stream_handle streamblock8 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock1 -action run"
set ret [sth::traffic_control -stream_handle streamblock1 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock1 -action stop"
set ret [sth::traffic_control -stream_handle streamblock1 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock1 -action run"
set ret [sth::traffic_control -stream_handle streamblock1 -action run]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::traffic_control -stream_handle streamblock1 -action stop"
set ret [sth::traffic_control -stream_handle streamblock1 -action stop]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::interface_config -mode destroy -port_handle port1"
set ret [sth::interface_config -mode destroy -port_handle port1]
set logged_ret "{arpnd_status none} {arpnd_cache none} {arpnd_report none} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::interface_config -mode destroy -port_handle port2"
set ret [sth::interface_config -mode destroy -port_handle port2]
set logged_ret "{arpnd_status none} {arpnd_cache none} {arpnd_report none} {status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret

puts "\nsth::cleanup_session -port_handle {port1 port2} -clean_dbfile 1"
set ret [sth::cleanup_session -port_handle {port1 port2} -clean_dbfile 1]
set logged_ret "{status 1}"
if {$ret ne $logged_ret} {
    puts "<warning>NOT same return value as logged result."
}
puts $ret
